{
  "info": {
    "name": "Instaclone Microservices API",
    "description": "Complete API collection for testing the Instaclone microservices application. This collection includes all authentication and post management endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        },
        "description": "Check if the API Gateway is running and responding."
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    }",
                  "    if (response.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns user data and tokens upon successful registration."
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    }",
                  "    if (response.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing user credentials. Returns access and refresh tokens upon successful login."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    }",
                  "    if (response.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{refreshToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Get a new access token using the refresh token. Requires the refresh token in the Authorization header."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout the current user. Requires a valid access token. This will invalidate the current session."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, token refresh, and logout."
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "Create Post",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"caption\": \"This is my first post!\",\n  \"mediaUrl\": \"https://example.com/image.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": ["{{baseUrl}}"],
              "path": ["posts"]
            },
            "description": "Create a new post. Requires authentication. The mediaUrl must be a valid URL."
          },
          "response": []
        },
        {
          "name": "Get User Feed",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts/feed",
              "host": ["{{baseUrl}}"],
              "path": ["posts", "feed"]
            },
            "description": "Get the personal post feed for the logged-in user. Requires authentication. Returns cached results for better performance."
          },
          "response": []
        }
      ],
      "description": "Post management endpoints for creating posts and retrieving user feeds."
    },
    {
      "name": "User Relationships",
      "item": [
        {
          "name": "Follow User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userIdToFollow\": \"<target-user-id>\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/follow",
              "host": ["{{baseUrl}}"],
              "path": ["users", "follow"]
            },
            "description": "Follow another user by their user ID. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Unfollow User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userIdToUnfollow\": \"<target-user-id>\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/unfollow",
              "host": ["{{baseUrl}}"],
              "path": ["users", "unfollow"]
            },
            "description": "Unfollow a user by their user ID. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get Following List",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/following",
              "host": ["{{baseUrl}}"],
              "path": ["users", "following"]
            },
            "description": "Get the list of users the current user is following. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get Followers List",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/followers",
              "host": ["{{baseUrl}}"],
              "path": ["users", "followers"]
            },
            "description": "Get the list of users following the current user. Requires authentication."
          },
          "response": []
        }
      ],
      "description": "Endpoints for following, unfollowing, and listing followers/following."
    },
    {
      "name": "Notification Service",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:3004/health",
              "host": ["localhost"],
              "port": "3004",
              "path": ["health"]
            },
            "description": "Check if the notification service is running and healthy."
          },
          "response": []
        },
        {
          "name": "Test Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"test-user-123\",\n  \"caption\": \"Test notification via HTTP\",\n  \"mediaUrl\": \"https://example.com/test.jpg\"\n}"
            },
            "url": {
              "raw": "http://localhost:3004/test-notification",
              "host": ["localhost"],
              "port": "3004",
              "path": ["test-notification"]
            },
            "description": "Test the notification service directly via HTTP endpoint."
          },
          "response": []
        },
        {
          "name": "Get My Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:3000/notifications/my",
              "host": ["localhost"],
              "port": "3000",
              "path": ["notifications", "my"]
            },
            "description": "Get all notifications for the authenticated user."
          },
          "response": []
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:3000/notifications/{{notification_id}}/read",
              "host": ["localhost"],
              "port": "3000",
              "path": ["notifications", "{{notification_id}}", "read"]
            },
            "description": "Mark a specific notification as read."
          },
          "response": []
        },
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:3000/notifications/read-all",
              "host": ["localhost"],
              "port": "3000",
              "path": ["notifications", "read-all"]
            },
            "description": "Mark all notifications for the authenticated user as read."
          },
          "response": []
        }
      ],
      "description": "Direct HTTP endpoints for testing the notification service."
    }
  ]
} 